Getting Started
1.) create a basic sinatra app in a file called cms.rb and add boilerplate code for a basic sinatra app with sessions enabled
2.) add a get path to "/"
3.) add a gemfile and bundle install required gems

Adding an Index Page
1.) add a cms filesystem called "data" containing "about.txt", "history.txt", and "changes.txt"
2.) create a file for the index page called views/index.erb
3.) add code which will render the contents of "data" inside index.erb

Viewing Text Files
1.) add content to the files contained in the "data" folder
2.) make each <li> on index.erb a link to a page which will display the contents of that file

Adding Tests
1.) add minitest to the Gemfile
2.) create test/cms_test.rb and add setup code
3.) create a test that performs a get request to "/", validates that the response is successful, and validates that the response contains the names of the three text files
4.) create a test that performs a get request to '/changes.txt' and contains the text 'something'

Handle Requests for Nonexistent Documents
1.) Check to see if a file exists before attempting to read in its content.
2.) If a document doesn't exist, store an error message in the session and redirect the user.
3.) In the index template, if there is error message, print it out and delete it.

Viewing Markdown Files
1.) Rename about.txt to about.md Add some Markdown-formatted text to this file.
2.) Create a helper method called render_markdown that takes a single argument, the text to be processed, and returns rendered HTML.
3.) When a user is viewing a file with the extension md, render the file's content using RedCarpet and return the result as the response's body.

Editing Document Content
1.) Update views/index.erb to add edit links after each document name.
2.) Create a new route for editing a document. Within this route, render a new view template that contains a form and a text area.
3.) Create a new route for saving changes to the document. Within this route, update the contents of the appropriate document, add a message to the session, and redirect the user.
Give us your feedback

Adding Global Style and Behavior
1.) Add the following CSS to a new file called cms.css in your 
project.
2.) Create a layout called layout.erb, and link to the cms.css file from it.
3.) When viewing a text file, no surrounding HTML code should be sent in the response.

Creating New Documents
1.) Create link to add a new document on the index page.
2.) Add a textarea and a submit button to the new page.

Deleting Documents
1.) Add a link to delete each item on index.erb
2.) add a route to post "/:filename/delete", redirect to "/" and flash a message "$FILENAME was deleted"

Signing In And Out
1.) Create a route that renders a view template containing a sign in form.
2.) Create a route that the form from #1 submits to.
3.) If the credentials are correct, store the username and the success message in the session and redirect to the index page.
4.) If the credentials are not correct, rerender the sign in form and display an error message.
5.) Add some code to the index page to display a "Sign In" or "Sign Out" button and message based on whether the user is signed in.
6.) Create a route that deletes the username from the session, adds a message to the session, and redirects the user to the index page. Point the "Sign Out" button created in #3 at this route.

Accessing the Session While Testing
1.) Update all existing tests to use the above methods for verifying session values. This means that many tests will become shorter as assertions can be made directly about the session instead of the content of a response's body. Specifically, instead of loading a page using get and then checking to see if a given message is displayed on it, session[:message] can be used to access the session value directly.